#ifndef MKL81_H
#define MKL81_H

#include "bits.h"
#include "compiler.h"

/* Interrupts */
typedef enum {
	NonMaskableInt_IRQn	= -14,	/* 2 Non Maskable Interrupt */
	HardFault_IRQn		= -13,	/* 3 Cortex-M0 Hard Fault Interrupt */
	SVC_IRQn		= -5,	/* 11 Cortex-M0 SV Call Interrupt */
	PendSV_IRQn		= -2,	/* 14 Cortex-M0 Pend SV Interrupt */
	SysTick_IRQn		= -1,	/* 15 Cortex-M0 System Tick Interrupt */

	DMA0_Ch_0_4_IRQn	= 0,
	DMA0_Ch_1_5_IRQn	= 1,
	DMA0_Ch_2_6_IRQn	= 2,
	DMA0_Ch_3_7_IRQn	= 3,
	DMA0_Err_IRQn		= 4,
	FlexIO0_IRQn		= 5,
	TPM0_IRQn		= 6,
	TPM1_IRQn		= 7,
	TPM2_IRQn		= 8,
	PIT0_IRQn		= 9,
	SPI0_IRQn		= 10,
	EMVSIM0_IRQn		= 11,
	LPUART0_IRQn		= 12,
	LPUART1_IRQn		= 13,
	I2C0_IRQn		= 14,
	QSPI0_IRQn		= 15,
	DryIce_IRQn		= 16,
	PortA_IRQn		= 17,
	PortB_IRQn		= 18,
	PortC_IRQn		= 19,
	PortD_IRQn		= 20,
	PortE_IRQn		= 21,
	LLWU_IRQn		= 22,
	LTC0_IRQn		= 23,
	USB0_IRQn		= 24,
	ADC0_IRQn		= 25,
	LPTMR0_IRQn		= 26,
	RTC_Secs_IRQn		= 27,
	INTMUX0_0_IRQn		= 28,
	INTMUX0_1_IRQn		= 29,
	INTMUX0_2_IRQn		= 30,
	INTMUX0_3_IRQn		= 31,
} IRQn_Type;

typedef enum {
	LPTMR1_IRQn	= 0,
	SPI1_IRQn	= 4,
	LPUART2_IRQn	= 5,
	EMVSIM1_IRQn	= 6,
	I2C1_IRQn	= 7,
	TSI0_IRQn	= 8,
	PMC_IRQn	= 9,
	FTFA_IRQn	= 10,
	MCG_IRQn	= 11,
	WDOG0_EWM_IRQn	= 12,
	DAC0_IRQn	= 13,
	TRNG0_IRQn	= 14,
	CMP0_IRQn	= 16,
	RTC_Alarm_IRQn	= 18,
	DMA0_4_IRQn	= 24,
	DMA0_5_IRQn	= 25,
	DMA0_6_IRQn	= 26,
	DMA0_7_IRQn	= 27,
} INTMUX0_IRQn_Type;

/* CMSIS compatible SysTick */
static __maybe_unused struct {
	volatile uint32_t CTRL;
	volatile uint32_t LOAD;
	volatile uint32_t VAL;
	volatile const uint32_t CALIB;
} * const SysTick = (void *)0xe000e010;

/* CMSIS compatible SCB */
static __maybe_unused struct {
	volatile const uint32_t CPUID;
	volatile uint32_t ICSR;
	volatile uint32_t VTOR;
	volatile uint32_t AIRCR;
	volatile uint32_t SCR;
	volatile uint32_t CCR;
	volatile uint32_t RESERVED1;
	volatile uint32_t SHP[2];
	volatile uint32_t SHCSR;
} * const SCB = (void *)0xe000ed00;

#define SCB_ICSR_PENDSTCLR_Msk	BIT(25)
#define SCB_ICSR_PENDSTSET_Msk	BIT(26)
#define SCB_ICSR_PENDSVCLR_Msk	BIT(27)
#define SCB_ICSR_PENDSVSET_Msk	BIT(28)
#define SCB_ICSR_NMIPENDSET_Msk	BIT(31)

/* CMSIS compatible NVIC */
static __maybe_unused struct {
	volatile uint32_t ISER[1];
	volatile uint32_t RES1[31];
	volatile uint32_t ICER[1];
	volatile uint32_t RES2[31];
	volatile uint32_t ISPR[1];
	volatile uint32_t RES3[31];
	volatile uint32_t ICPR[1];
	volatile uint32_t RES4[31];
	volatile uint32_t RES5[64];
	volatile uint32_t IP[8];
} * const NVIC = (void *)0xe000e100;

#define REG8(_a)		(*(volatile uint8_t *)(_a))
#define REG32(_a)		(*(volatile uint32_t *)(_a))

/* FOPT */
#define FOPT_LPBOOT				BIT8(0)
#define FOPT_BOOTPIN_OPT			BIT8(1)
#define FOPT_NMI_DIS				BIT8(2)
#define FOPT_FAST_INIT				BIT8(5)

#define FOPT_BOOTSRC_SEL_MASK			GENMASK8(7, 6)
#define FOPT_BOOTSRC_SEL(x)			FIELD_PREP(FOPT_BOOTSRC_SEL_MASK, x)
#define FOPT_BOOTSRC_SEL_INTERNAL_FLASH		FOPT_BOOTSRC_SEL(0)
#define FOPT_BOOTSRC_SEL_BOOTLOADER_QSPI	FOPT_BOOTSRC_SEL(2)
#define FOPT_BOOTSRC_SEL_BOOTLOADER		FOPT_BOOTSRC_SEL(3)

/* FSEC */
#define FSEC_SEC_MASK		GENMASK8(1, 0)
#define FSEC_SEC(x)		FIELD_PREP(FSEC_SEC_MASK, x)
#define FSEC_SEC_SECURE		FSEC_SEC(0)
#define FSEC_SEC_UNSECURE	FSEC_SEC(2)

#define FSEC_FSLACC_MASK	GENMASK8(3, 2)
#define FSEC_FSLACC(x)		FIELD_PREP(FSEC_FSLACC_MASK, x)
#define FSEC_FSLACC_GRANT	FSEC_FSLACC(0)
#define FSEC_FSLACC_DENY	FSEC_FSLACC(1)

#define FSEC_MEEN_MASK		GENMASK8(5, 4)
#define FSEC_MEEN(x)		FIELD_PREP(FSEC_MEEN_MASK, x)
#define FSEC_MEEN_DIS		FSEC_MEEN(2)
#define FSEC_MEEN_EN		FSEC_MEEN(0)

#define FSEC_KEYEN_MASK		GENMASK8(7, 6)
#define FSEC_KEYEN(x)		FIELD_PREP(FSEC_KEYEN_MASK, x)
#define FSEC_KEYEN_DIS		FSEC_KEYEN(1)
#define FSEC_KEYEN_EN		FSEC_KEYEN(2)

/* BME */
#define BME_REGION_BEGIN	0x40000000
#define BME_REGION_END		0x40080000
#define BME_REGION_GPIO_BEGIN	0x400ff000
#define BME_REGION_GPIO_END	0x40100000
#define BME_OP_MASK		GENMASK(28, 26)
#define BME_OP(x)		FIELD_PREP(BME_OP_MASK, x)
#define BME_OP_AND		BME_OP(1)
#define BME_OP_OR		BME_OP(2)
#define BME_OP_XOR		BME_OP(3)
#define BME_OP_BF_INSERT	BME_OP(4)
#define BME_OP_LOAD_CLEAR	BME_OP(2)
#define BME_OP_LOAD_SET		BME_OP(3)
#define BME_ADDR_MASK		GENMASK(18, 0)
#define BME_ADDR_IS_GPIO(a)	((a) >= BME_REGION_GPIO_BEGIN && \
				 (a) < BME_REGION_GPIO_END)
#define BME_ADDR_MAP(a)		(BME_ADDR_IS_GPIO(a) ? ((a) & ~0xf0000) : (a))
#define BME_ADDR(a)		FIELD_PREP(BME_ADDR_MASK, BME_ADDR_MAP((uint32_t)a))
#define BME_BF_POS_MASK		GENMASK(27, 23)
#define BME_BF_POS(x)		FIELD_PREP(BME_BF_POS_MASK, x)
#define BME_BF_WIDTH_MASK	GENMASK(22, 19)
#define BME_BF_WIDTH(x)		FIELD_PREP(BME_BF_WIDTH_MASK, (x) - 1)
#define _BME_AND(_a)		(BME_REGION_BEGIN | BME_OP_AND | BME_ADDR(_a))
#define _BME_OR(_a)		(BME_REGION_BEGIN | BME_OP_OR | BME_ADDR(_a))
#define _BME_XOR(_a)		(BME_REGION_BEGIN | BME_OP_XOR | BME_ADDR(_a))
#define _BME_BITFIELD(_a, _m)	(BME_REGION_BEGIN | BME_OP_BF_INSERT | \
				 BME_BF_POS(__bf_shf(_m)) | \
				 BME_BF_WIDTH(__bf_len(_m)) | BME_ADDR(_a))
#define BME_AND(_a)		(*(typeof(&(_a)))_BME_AND(&(_a)))
#define BME_OR(_a)		(*(typeof(&(_a)))_BME_OR(&(_a)))
#define BME_XOR(_a)		(*(typeof(&(_a)))_BME_XOR(&(_a)))
#define BME_BITFIELD(_a, _m)	(*(volatile typeof(&(_a)))_BME_BITFIELD(&(_a), _m))
#define BME_LOAD_BIT_MASK	GENMASK(25, 21)
#define BME_LOAD_BIT(x)		FIELD_PREP(BME_LOAD_BIT_MASK, x)
#define _BME_LOAD_CLEAR(_a, _b)	(BME_REGION_BEGIN | BME_OP_LOAD_CLEAR | \
				 BME_LOAD_BIT(__bf_shf(_b)) | BME_ADDR(_a))
#define _BME_LOAD_SET(_a, _b)	(BME_REGION_BEGIN | BME_OP_LOAD_SET | \
				 BME_LOAD_BIT(__bf_shf(_b)) | BME_ADDR(_a))
#define BME_LOAD_CLEAR(_a, _b)	(*(typeof(&(_a)))_BME_LOAD_CLEAR(&(_a), _b))
#define BME_LOAD_SET(_a, _b)	(*(typeof(&(_a)))_BME_LOAD_SET(&(_a), _b))

typedef enum {
	AIPS_Slot	= 0,
	DMA_Slot	= 8,
	DMA_TCD_Slot	= 9,
	MPU_Slot	= 13,
	GPIO_Slot	= 15,
	FTFA_Slot	= 32,
	DMAMUX_Slot	= 33,
	INTMUX_Slot	= 36,
	TRNG_Slot	= 37,
	SPI0_Slot	= 44,
	SPI1_Slot	= 45,
	CRC_Slot	= 50,
	PIT0_Slot	= 55,
	TPM0_Slot	= 56,
	TPM1_Slot	= 57,
	TPM2_Slot	= 58,
	ADC0_Slot	= 59,
	RTC_Slot	= 61,
	VBAT_Slot	= 62,
	DAC0_Slot	= 63,
	LPTMR0_Slot	= 64,
	RFSYS_Slot	= 65,
	DryIce_Slot	= 66,
	DryIceStor_Slot	= 67,
	LPTMR1_Slot	= 68,
	TSI0_Slot	= 69,
	SIM_LP_Slot	= 71,
	SIM_Slot	= 72,
	PTA_Slot	= 73,
	PTB_Slot	= 74,
	PTC_Slot	= 75,
	PTD_Slot	= 76,
	PTE_Slot	= 77,
	EMVSIM0_Slot	= 78,
	EMVSIM1_Slot	= 79,
	LTC0_Slot	= 81,
	Watchdog_Slot	= 82,
	LPUART0_Slot	= 84,
	LPUART1_Slot	= 85,
	LPUART2_Slot	= 86,
	QSPI0_Slot	= 90,
	FlexIO0_Slot	= 95,
	EWM_Slot	= 97,
	MCG_Slot	= 100,
	OSC_Slot	= 101,
	I2C0_Slot	= 102,
	I2C1_Slot	= 103,
	USB_FS_Slot	= 114,
	CMP0_Slot	= 115,
	VREF_Slot	= 116,
	LLWU_Slot	= 124,
	PMC_Slot	= 125,
	SMC_Slot	= 126,
	RCM_Slot	= 127,
} AIPS_Slot_Type;

/* AIPS */
#define AIPS_REG32(_a)		REG32(0x40000000 + (_a))

#define AIPS_MPRA		AIPS_REG32(0x0)
#define _AIPS_PACR(_p)		AIPS_REG32(0x20 + ((_p) < 4 ? (_p) : ((_p) + 4)) * 0x4)
#define AIPS_PACR(_p)		_AIPS_PACR(((_p) & 127) >> 3)

/* AIPS_MPRA */
#define AIPS_MPRA_MPL(_m)	BIT((4 - (_m)) * 4 + 12)
#define AIPS_MPRA_MTW(_m)	BIT((4 - (_m)) * 4 + 13)
#define AIPS_MPRA_MTR(_m)	BIT((4 - (_m)) * 4 + 14)

/* AIPS_PACRn */
#define AIPS_PACR_MASK(_m)	GENMASK((7 - ((_m) & 7)) * 4 + 2, \
					(7 - ((_m) & 7)) * 4)
#define AIPS_PACR_TP(_m)	BIT((7 - ((_m) & 7)) * 4)
#define AIPS_PACR_WP(_m)	BIT((7 - ((_m) & 7)) * 4 + 1)
#define AIPS_PACR_SP(_m)	BIT((7 - ((_m) & 7)) * 4 + 2)

/* FTFA */
#define FTFA_REG8(_a)		REG8(0x40020000 + (_a))

#define FTFA_FSTAT		FTFA_REG8(0x0)
#define FTFA_FCNFG		FTFA_REG8(0x1)
#define FTFA_FSEC		FTFA_REG8(0x2)
#define FTFA_FOPT		FTFA_REG8(0x3)
#define FTFA_FCCOB_LWORD(_n)	REG32(0x40020004 + 4 * (_n))
#define FTFA_FCCOB(_n)		FTFA_REG8(0x7 + ((_n) & 0xc) - ((_n) & 3))
#define FTFA_FPROT(_n)		FTFA_REG8(0x13 - ((_n) & 3))
#define FTFA_XACCH(_n)		FTFA_REG8(0x1b - ((_n) & 3))
#define FTFA_XACCL(_n)		FTFA_REG8(0x1f - ((_n) & 3))
#define FTFA_SACCH(_n)		FTFA_REG8(0x23 - ((_n) & 3))
#define FTFA_SACCL(_n)		FTFA_REG8(0x27 - ((_n) & 3))
#define FTFA_FACSS		FTFA_REG8(0x28)
#define FTFA_FACSN		FTFA_REG8(0x2b)

/* FTFA_FSTAT */
#define FTFA_FSTAT_MGSTAT0	BIT8(0)
#define FTFA_FSTAT_FPVIOL	BIT8(4)
#define FTFA_FSTAT_ACCERR	BIT8(5)
#define FTFA_FSTAT_RDCOLERR	BIT8(6)
#define FTFA_FSTAT_CCIF		BIT8(7)

/* FTFA_FCNFG */
#define FTFA_FCNFG_ERSSUSP	BIT8(4)
#define FTFA_FCNFG_ERSAREQ	BIT8(5)
#define FTFA_FCNFG_RDCOLLIE	BIT8(6)
#define FTFA_FCNFG_CCIE		BIT8(7)

/* FTFA_FCCOB */
#define FTFA_FCCOB_FCMD			FTFA_FCCOB(0x0)
#define FTFA_FCCOB_FCMD_RD1S_SEC	0x1
#define FTFA_FCCOB_FCMD_PRG_CHK		0x2
#define FTFA_FCCOB_FCMD_RD_RSRC		0x3
#define FTFA_FCCOB_FCMD_PRG_LWRD	0x6
#define FTFA_FCCOB_FCMD_ERS_SECT	0x9
#define FTFA_FCCOB_FCMD_RD1S_ALL	0x40
#define FTFA_FCCOB_FCMD_RD_ONCE		0x41
#define FTFA_FCCOB_FCMD_PRG_ONCE	0x43
#define FTFA_FCCOB_FCMD_ERS_ALL		0x44
#define FTFA_FCCOB_FCMD_VRF_BCKDR_KEY	0x45
#define FTFA_FCCOB_FCMD_ERS_ALL_UNSEC	0x49
#define FTFA_FCCOB_FCMD_RD1S_ALL_XONLY	0x4a
#define FTFA_FCCOB_FCMD_ERS_ALL_XONLY	0x4b

/* INTMUX */
#define INTMUX_REG32(_a)		REG32(0x40024000 + (_a))
#define INTMUX_CH_REG32(_ch, _a)	INTMUX_REG32(0x40 * (_ch) + (_a))

#define INTMUX_CHn_CSR(_ch)	INTMUX_CH_REG32(_ch, 0x0)
#define INTMUX_CHn_VEC(_ch)	INTMUX_CH_REG32(_ch, 0x4)
#define INTMUX_CHn_IER(_ch)	INTMUX_CH_REG32(_ch, 0x10)
#define INTMUX_CHn_IPR(_ch)	INTMUX_CH_REG32(_ch, 0x20)

/* INTMUX_CHn_CSR */
#define INTMUX_CHn_CSR_RST		BIT(0)
#define INTMUX_CHn_CSR_AND		BIT(1)

#define INTMUX_CHn_CSR_IRQN_MASK	GENMASK(5, 4)
#define INTMUX_CHn_CSR_IRQN(x)		FIELD_PREP(INTMUX_CHn_CSR_IRQN_MASK, x)
#define INTMUX_CHn_CSR_IRQN_32INPUTS	INTMUX_CHn_CSR_IRQN(0)

#define INTMUX_CHn_CSR_CHIN_MASK	GENMASK(11, 8)
#define INTMUX_CHn_CSR_CHIN(x)		FIELD_PREP(INTMUX_CHn_CSR_CHIN_MASK, x)

#define INTMUX_CHn_CSR_IRQP		BIT(31)

/* INTMUX_CHn_VEC */
#define INTMUX_CHn_VEC_VECN_MASK	GENMASK(13, 2)
#define INTMUX_CHn_VEC_VECN(x)		FIELD_PREP(INTMUX_CHn_VEC_VECN_MASK, x)

/* SIM */
#define SIM_REG32(_a)		REG32(0x40048000 + (_a))

#define SIM_SOPT1		REG32(0x40047000)
#define SIM_SOPT2		SIM_REG32(0x4)
#define SIM_SOPT5		SIM_REG32(0x10)
#define SIM_SOPT7		SIM_REG32(0x18)
#define SIM_SOPT9		SIM_REG32(0x20)
#define SIM_SDID		SIM_REG32(0x24)
#define SIM_SCGC4		SIM_REG32(0x34)
#define SIM_SCGC5		SIM_REG32(0x38)
#define SIM_SCGC6		SIM_REG32(0x3c)
#define SIM_SCGC7		SIM_REG32(0x40)
#define SIM_CLKDIV1		SIM_REG32(0x44)
#define SIM_CLKDIV2		SIM_REG32(0x48)
#define SIM_FCFG1		SIM_REG32(0x4c)
#define SIM_FCFG2		SIM_REG32(0x50)
#define SIM_UIDH		SIM_REG32(0x54)
#define SIM_UIDMH		SIM_REG32(0x58)
#define SIM_UIDML		SIM_REG32(0x5c)
#define SIM_UIDL		SIM_REG32(0x60)
#define SIM_CLKDIV3		SIM_REG32(0x64)
#define SIM_MISCCTRL		SIM_REG32(0x6c)
#define SIM_SECKEY0		SIM_REG32(0x90)
#define SIM_SECKEY1		SIM_REG32(0x94)
#define SIM_SECKEY2		SIM_REG32(0x98)
#define SIM_SECKEY3		SIM_REG32(0x9c)

/* SIM_SOPT1 */
#define SIM_SOPT1_OSC32KSEL_MASK	GENMASK(19, 18)
#define SIM_SOPT1_OSC32KSEL_SYS		FIELD_PREP(SIM_SOPT1_OSC32KSEL_MASK, 0)
#define SIM_SOPT1_OSC32KSEL_RTC		FIELD_PREP(SIM_SOPT1_OSC32KSEL_MASK, 2)
#define SIM_SOPT1_OSC32KSEL_LPO		FIELD_PREP(SIM_SOPT1_OSC32KSEL_MASK, 3)

/* SIM_SOPT2 */
#define SIM_SOPT2_RTCCLKOUT_SEL		BIT(4)

#define SIM_SOPT2_CLKOUT_MASK		GENMASK(7, 5)
#define SIM_SOPT2_CLKOUT(x)		FIELD_PREP(SIM_SOPT2_CLKOUT_MASK, x)
#define SIM_SOPT2_CLKOUT_FLASH		SIM_SOPT2_CLKOUT(2)
#define SIM_SOPT2_CLKOUT_LPO		SIM_SOPT2_CLKOUT(3)
#define SIM_SOPT2_CLKOUT_MCGIR		SIM_SOPT2_CLKOUT(4)
#define SIM_SOPT2_CLKOUT_RTC		SIM_SOPT2_CLKOUT(5)
#define SIM_SOPT2_CLKOUT_OSC0		SIM_SOPT2_CLKOUT(6)
#define SIM_SOPT2_CLKOUT_IRC48M		SIM_SOPT2_CLKOUT(7)

#define SIM_SOPT2_PLLFLLSEL_MASK	GENMASK(17, 16)
#define SIM_SOPT2_PLLFLLSEL(x)		FIELD_PREP(SIM_SOPT2_PLLFLLSEL_MASK, x)
#define SIM_SOPT2_PLLFLLSEL_FLL		SIM_SOPT2_PLLFLLSEL(0)
#define SIM_SOPT2_PLLFLLSEL_PLL		SIM_SOPT2_PLLFLLSEL(1)
#define SIM_SOPT2_PLLFLLSEL_IRC48M	SIM_SOPT2_PLLFLLSEL(3)

#define SIM_SOPT2_USBSRC_SEL		BIT(18)

#define SIM_SOPT2_SRC_DIS		0
#define SIM_SOPT2_SRC_MCG		1
#define SIM_SOPT2_SRC_OSC		2
#define SIM_SOPT2_SRC_MCGIR		3
#define SIM_SOPT2_FLEXIOSRC_MASK	GENMASK(23, 22)
#define SIM_SOPT2_FLEXIOSRC(x)		FIELD_PREP(SIM_SOPT2_FLEXIOSRC_MASK, SIM_SOPT2_SRC_ ## x)

#define SIM_SOPT2_TPMSRC_MASK		GENMASK(25, 24)
#define SIM_SOPT2_TPMSRC(x)		FIELD_PREP(SIM_SOPT2_TPMSRC_MASK, SIM_SOPT2_SRC_ ## x)

#define SIM_SOPT2_LPUARTSRC_MASK	GENMASK(27, 26)
#define SIM_SOPT2_LPUARTSRC(x)		FIELD_PREP(SIM_SOPT2_LPUARTSRC_MASK, SIM_SOPT2_SRC_ ## x)

#define SIM_SOPT2_EMVSIMSRC_MASK	GENMASK(31, 30)
#define SIM_SOPT2_EMVSIMSRC(x)		FIELD_PREP(SIM_SOPT2_EMVSIMSRC_MASK, SIM_SOPT2_SRC_ ## x)

/* SIM_SCGC4 */
#define SIM_SCGC4_EWM		BIT(1)
#define SIM_SCGC4_I2C0		BIT(6)
#define SIM_SCGC4_I2C1		BIT(7)
#define SIM_SCGC4_USBOTG	BIT(18)
#define SIM_SCGC4_CMP		BIT(19)
#define SIM_SCGC4_VREF		BIT(20)

/* SIM_SCGC5 */
#define SIM_SCGC5_LPTMR0	BIT(0)
#define SIM_SCGC5_DRYICE	BIT(2)
#define SIM_SCGC5_SECREG	BIT(3)
#define SIM_SCGC5_LPTMR1	BIT(4)
#define SIM_SCGC5_TSI		BIT(5)
#define SIM_SCGC5_PTA		BIT(9)
#define SIM_SCGC5_PTB		BIT(10)
#define SIM_SCGC5_PTC		BIT(11)
#define SIM_SCGC5_PTD		BIT(12)
#define SIM_SCGC5_PTE		BIT(13)
#define SIM_SCGC5_EMVSIM0	BIT(14)
#define SIM_SCGC5_EMVSIM1	BIT(15)
#define SIM_SCGC5_LTC		BIT(17)
#define SIM_SCGC5_LPUART0	BIT(20)
#define SIM_SCGC5_LPUART1	BIT(21)
#define SIM_SCGC5_LPUART2	BIT(22)
#define SIM_SCGC5_QSPI0		BIT(26)
#define SIM_SCGC5_FLEXIO0	BIT(31)

/* SIM_SCGC6 */
#define SIM_SCGC6_NVM		BIT(0)
#define SIM_SCGC6_DMACHMUX	BIT(1)
#define SIM_SCGC6_INTMUX0	BIT(4)
#define SIM_SCGC6_TRNG		BIT(5)
#define SIM_SCGC6_SPI0		BIT(12)
#define SIM_SCGC6_SPI1		BIT(13)
#define SIM_SCGC6_CRC		BIT(18)
#define SIM_SCGC6_PIT0		BIT(23)
#define SIM_SCGC6_TPM0		BIT(24)
#define SIM_SCGC6_TPM1		BIT(25)
#define SIM_SCGC6_TPM2		BIT(26)
#define SIM_SCGC6_ADC0		BIT(27)
#define SIM_SCGC6_RTC		BIT(29)
#define SIM_SCGC6_RTC_RF	BIT(30)
#define SIM_SCGC6_DAC0		BIT(31)

/* SIM_SCGC7 */
#define SIM_SCGC7_DMA		BIT(1)
#define SIM_SCGC7_MPU		BIT(2)

/* SIM_CLKDIV1 */
#define SIM_CLKDIV1_OUTDIV5_MASK	GENMASK(15, 12)
#define SIM_CLKDIV1_OUTDIV5(x)		FIELD_PREP(SIM_CLKDIV1_OUTDIV5_MASK, (x) - 1)

#define SIM_CLKDIV1_OUTDIV4_MASK	GENMASK(19, 16)
#define SIM_CLKDIV1_OUTDIV4(x)		FIELD_PREP(SIM_CLKDIV1_OUTDIV4_MASK, (x) - 1)

#define SIM_CLKDIV1_OUTDIV2_MASK	GENMASK(27, 24)
#define SIM_CLKDIV1_OUTDIV2(x)		FIELD_PREP(SIM_CLKDIV1_OUTDIV2_MASK, (x) - 1)

#define SIM_CLKDIV1_OUTDIV1_MASK	GENMASK(31, 28)
#define SIM_CLKDIV1_OUTDIV1(x)		FIELD_PREP(SIM_CLKDIV1_OUTDIV1_MASK, (x) - 1)

/* SIM_CLKDIV2 */
#define SIM_CLKDIV2_USBFRAC		BIT(0)

#define SIM_CLKDIV2_USBDIV_MASK		GENMASK(3, 1)
#define SIM_CLKDIV2_USBDIV(x)		FIELD_PREP(SIM_CLKDIV2_USBDIV_MASK, (x) - 1)

/* SIM_CLKDIV3 */
#define SIM_CLKDIV3_PLLFLLFRAC		BIT(0)

#define SIM_CLKDIV3_PLLFLLDIV_MASK	GENMASK(3, 1)
#define SIM_CLKDIV3_PLLFLLDIV(x)	FIELD_PREP(SIM_CLKDIV3_PLLFLLDIV_MASK, (x) - 1)

/* MCG */
#define MCG_REG(_a)	REG8(0x40064000 + (_a))

#define MCG_C1		MCG_REG(0x0)
#define MCG_C2		MCG_REG(0x1)
#define MCG_C3		MCG_REG(0x2)
#define MCG_C4		MCG_REG(0x3)
#define MCG_C5		MCG_REG(0x4)
#define MCG_C6		MCG_REG(0x5)
#define MCG_S		MCG_REG(0x6)
#define MCG_SC		MCG_REG(0x8)
#define MCG_ATCVH	MCG_REG(0xa)
#define MCG_ATCVL	MCG_REG(0xb)
#define MCG_C7		MCG_REG(0xc)
#define MCG_C8		MCG_REG(0xd)

/* MCG_C1 */
#define MCG_C1_IREFSTEN		BIT8(0)
#define MCG_C1_IRCLKEN		BIT8(1)
#define MCG_C1_IREFS		BIT8(2)

#define MCG_C1_FRDIV_MASK	GENMASK8(5, 3)
#define MCG_C1_FRDIV(x)		FIELD_PREP(MCG_C1_FRDIV_MASK, x)
#define MCG_C1_FRDIV_R0DIV1	MCG_C1_FRDIV(0)
#define MCG_C1_FRDIV_R0DIV2	MCG_C1_FRDIV(1)
#define MCG_C1_FRDIV_R0DIV4	MCG_C1_FRDIV(2)
#define MCG_C1_FRDIV_R0DIV8	MCG_C1_FRDIV(3)
#define MCG_C1_FRDIV_R0DIV16	MCG_C1_FRDIV(4)
#define MCG_C1_FRDIV_R0DIV32	MCG_C1_FRDIV(5)
#define MCG_C1_FRDIV_R0DIV64	MCG_C1_FRDIV(6)
#define MCG_C1_FRDIV_R0DIV128	MCG_C1_FRDIV(7)
#define MCG_C1_FRDIV_DIV32	MCG_C1_FRDIV(0)
#define MCG_C1_FRDIV_DIV64	MCG_C1_FRDIV(1)
#define MCG_C1_FRDIV_DIV128	MCG_C1_FRDIV(2)
#define MCG_C1_FRDIV_DIV256	MCG_C1_FRDIV(3)
#define MCG_C1_FRDIV_DIV512	MCG_C1_FRDIV(4)
#define MCG_C1_FRDIV_DIV1024	MCG_C1_FRDIV(5)
#define MCG_C1_FRDIV_DIV1280	MCG_C1_FRDIV(6)
#define MCG_C1_FRDIV_DIV1536	MCG_C1_FRDIV(7)

#define MCG_C1_CLKS_MASK	GENMASK8(7, 6)
#define MCG_C1_CLKS(x)		FIELD_PREP(MCG_C1_CLKS_MASK, x)
#define MCG_C1_CLKS_PLLFLL	MCG_C1_CLKS(0)
#define MCG_C1_CLKS_INTREF	MCG_C1_CLKS(1)
#define MCG_C1_CLKS_EXTREF	MCG_C1_CLKS(2)

/* MCG_C2 */
#define MCG_C2_IRCS		BIT8(0)
#define MCG_C2_LP		BIT8(1)
#define MCG_C2_EREFS		BIT8(2)
#define MCG_C2_HGO		BIT8(3)

#define MCG_C2_RANGE_MASK	GENMASK8(5, 4)
#define MCG_C2_RANGE(x)		FIELD_PREP(MCG_C2_RANGE_MASK, x)
#define MCG_C2_RANGE_LOW	MCG_C2_RANGE(0)
#define MCG_C2_RANGE_HIGH	MCG_C2_RANGE(1)
#define MCG_C2_RANGE_VHIGH	MCG_C2_RANGE(2)

#define MCG_C2_FCFTRIM		BIT8(6)
#define MCG_C2_LOCRE0		BIT8(7)

/* MCG_C4 */
#define MCG_C4_SCFTRIM		BIT8(0)

#define MCG_C4_FCTRIM_MASK	GENMASK8(4, 1)
#define MCG_C4_FCTRIM(x)	FIELD_PREP(MCG_C4_FCTRIM_MASK, x)

#define MCG_C4_DRST_DRS_MASK	GENMASK8(6, 5)
#define MCG_C4_DRST_DRS(x)	FIELD_PREP(MCG_C4_DRST_DRS_MASK, x)
#define MCG_C4_DRST_DRS_LOW	MCG_C4_DRST_DRS(0)
#define MCG_C4_DRST_DRS_MID	MCG_C4_DRST_DRS(1)
#define MCG_C4_DRST_DRS_MIDHIGH	MCG_C4_DRST_DRS(2)
#define MCG_C4_DRST_DRS_HIGH	MCG_C4_DRST_DRS(3)

#define MCG_C4_DMX32		BIT8(7)

/* MCG_C5 */
#define MCG_C5_PRDIV_MASK	GENMASK8(2, 0)
#define MCG_C5_PRDIV(x)		FIELD_PREP(MCG_C5_PRDIV_MASK, (x) - 1)

#define MCG_C5_PLLSTEN		BIT8(5)
#define MCG_C5_PLLCLKEN		BIT8(6)

/* MCG_C6 */
#define MCG_C6_VDIV_MASK	GENMASK8(4, 0)
#define MCG_C6_VDIV(x)		FIELD_PREP(MCG_C6_VDIV_MASK, x)

#define MCG_C6_CME0		BIT8(5)
#define MCG_C6_PLLS		BIT8(6)
#define MCG_C6_LOLIE0		BIT8(7)

/* MCG_S */
#define MCG_S_IRCST		BIT8(0)
#define MCG_S_OSCINIT0		BIT8(1)

#define MCG_S_CLKST_MASK	GENMASK8(3, 2)
#define MCG_S_CLKST(x)		FIELD_PREP(MCG_S_CLKST_MASK, x)
#define MCG_S_CLKST_FLL		MCG_S_CLKST(0)
#define MCG_S_CLKST_INTREF	MCG_S_CLKST(1)
#define MCG_S_CLKST_EXTREF	MCG_S_CLKST(2)
#define MCG_S_CLKST_PLL		MCG_S_CLKST(3)

#define MCG_S_IREFST		BIT8(4)
#define MCG_S_PLLST		BIT8(5)
#define MCG_S_LOCK0		BIT8(6)
#define MCG_S_LOLS0		BIT8(7)

/* MCG_C7 */
#define MCG_C7_OSCSEL_MASK	GENMASK8(1, 0)
#define MCG_C7_OSCSEL(x)	FIELD_PREP(MCG_C7_OSCSEL_MASK, x)
#define MCG_C7_OSCSEL_OSCCLK0	MCG_C7_OSCSEL(0)
#define MCG_C7_OSCSEL_32KHZ	MCG_C7_OSCSEL(1)
#define MCG_C7_OSCSEL_OSCCLK1	MCG_C7_OSCSEL(2)

/* LPUART */
#define LPUART_REG32(_u, _a)	REG32(0x40054000 + 0x1000 * (_u) + (_a))

#define LPUART_BAUD(_u)		LPUART_REG32(_u, 0x0)
#define LPUART_STAT(_u)		LPUART_REG32(_u, 0x4)
#define LPUART_CTRL(_u)		LPUART_REG32(_u, 0x8)
#define LPUART_DATA(_u)		LPUART_REG32(_u, 0xc)
#define LPUART_MATCH(_u)	LPUART_REG32(_u, 0x10)
#define LPUART_MODIR(_u)	LPUART_REG32(_u, 0x14)
#define LPUART_FIFO(_u)		LPUART_REG32(_u, 0x18)
#define LPUART_WATER(_u)	LPUART_REG32(_u, 0x1c)

/* LPUART_BAUD */
#define LPUART_BAUD_SBR_MASK		GENMASK(12, 0)
#define LPUART_BAUD_SBR(x)		FIELD_PREP(LPUART_BAUD_SBR_MASK, x)

#define LPUART_BAUD_SBNS		BIT(13)
#define LPUART_BAUD_RXEDGIE		BIT(14)
#define LPUART_BAUD_LBKDIE		BIT(15)
#define LPUART_BAUD_RESYNCDIS		BIT(16)
#define LPUART_BAUD_BOTHEDGE		BIT(17)

#define LPUART_BAUD_MATCFG_MASK		GENMASK(19, 18)
#define LPUART_BAUD_MATCFG(x)		FIELD_PREP(LPUART_BAUD_MATCFG_MASK, x)
#define LPUART_BAUD_MATCFG_AMW		LPUART_BAUD_MATCFG(0)
#define LPUART_BAUD_MATCFG_IMW		LPUART_BAUD_MATCFG(1)
#define LPUART_BAUD_MATCFG_MONOFF	LPUART_BAUD_MATCFG(2)
#define LPUART_BAUD_MATCFG_RWU		LPUART_BAUD_MATCFG(3)

#define LPUART_BAUD_RDMAE		BIT(21)
#define LPUART_BAUD_TDMAE		BIT(23)

#define LPUART_BAUD_OSR_MASK		GENMASK(28, 24)
#define LPUART_BAUD_OSR(x)		FIELD_PREP(LPUART_BAUD_OSR_MASK, (x) - 1)

#define LPUART_BAUD_M10			BIT(29)
#define LPUART_BAUD_MAEN2		BIT(30)
#define LPUART_BAUD_MAEN1		BIT(31)

/* LPUART_STAT */
#define LPUART_STAT_MA2F	BIT(14)
#define LPUART_STAT_MA1F	BIT(15)
#define LPUART_STAT_PF		BIT(16)
#define LPUART_STAT_FE		BIT(17)
#define LPUART_STAT_NF		BIT(18)
#define LPUART_STAT_OR		BIT(19)
#define LPUART_STAT_IDLE	BIT(20)
#define LPUART_STAT_RDRF	BIT(21)
#define LPUART_STAT_TC		BIT(22)
#define LPUART_STAT_TDRE	BIT(23)
#define LPUART_STAT_RAF		BIT(24)
#define LPUART_STAT_LBKDE	BIT(25)
#define LPUART_STAT_BRK13	BIT(26)
#define LPUART_STAT_RWUID	BIT(27)
#define LPUART_STAT_RXINV	BIT(28)
#define LPUART_STAT_MSBF	BIT(29)
#define LPUART_STAT_RXEDGIF	BIT(30)
#define LPUART_STAT_LBKDIF	BIT(31)

/* LPUART_CTRL */
#define LPUART_CTRL_PT			BIT(0)
#define LPUART_CTRL_PE			BIT(1)
#define LPUART_CTRL_ILT			BIT(2)
#define LPUART_CTRL_WAKE		BIT(3)
#define LPUART_CTRL_M			BIT(4)
#define LPUART_CTRL_RSRC		BIT(5)
#define LPUART_CTRL_DOZEEN		BIT(6)
#define LPUART_CTRL_LOOPS		BIT(7)

#define LPUART_CTRL_IDLECFG_MASK	GENMASK(10, 8)
#define LPUART_CTRL_IDLECFG(x)		FIELD_PREP(LPUART_CTRL_IDLECFG_MASK, x)
#define LPUART_CTRL_IDLECFG_1		LPUART_CTRL_IDLECFG(0)
#define LPUART_CTRL_IDLECFG_2		LPUART_CTRL_IDLECFG(1)
#define LPUART_CTRL_IDLECFG_4		LPUART_CTRL_IDLECFG(2)
#define LPUART_CTRL_IDLECFG_8		LPUART_CTRL_IDLECFG(3)
#define LPUART_CTRL_IDLECFG_16		LPUART_CTRL_IDLECFG(4)
#define LPUART_CTRL_IDLECFG_32		LPUART_CTRL_IDLECFG(5)
#define LPUART_CTRL_IDLECFG_64		LPUART_CTRL_IDLECFG(6)
#define LPUART_CTRL_IDLECFG_128		LPUART_CTRL_IDLECFG(7)

#define LPUART_CTRL_MA2IE	BIT(14)
#define LPUART_CTRL_MA1IE	BIT(15)
#define LPUART_CTRL_SBK		BIT(16)
#define LPUART_CTRL_RWU		BIT(17)
#define LPUART_CTRL_RE		BIT(18)
#define LPUART_CTRL_TE		BIT(19)
#define LPUART_CTRL_ILIE	BIT(20)
#define LPUART_CTRL_RIE		BIT(21)
#define LPUART_CTRL_TCIE	BIT(22)
#define LPUART_CTRL_TIE		BIT(23)
#define LPUART_CTRL_PEIE	BIT(24)
#define LPUART_CTRL_FEIE	BIT(25)
#define LPUART_CTRL_NEIE	BIT(26)
#define LPUART_CTRL_ORIE	BIT(27)
#define LPUART_CTRL_TXINV	BIT(28)
#define LPUART_CTRL_TXDIR	BIT(29)
#define LPUART_CTRL_R9T8	BIT(30)
#define LPUART_CTRL_R8T9	BIT(31)

/* LPUART_DATA */
#define LPUART_DATA_DATA_MASK	GENMASK(9, 0)
#define LPUART_DATA_DATA(x)	FIELD_PREP(LPUART_DATA_DATA_MASK, x)

#define LPUART_DATA_IDLINE	BIT(11)
#define LPUART_DATA_RXEMPT	BIT(12)
#define LPUART_DATA_FRETSC	BIT(13)
#define LPUART_DATA_PARITYE	BIT(14)
#define LPUART_DATA_NOISY	BIT(15)

/* LPUART_MATCH */
#define LPUART_MATCH_MA1_MASK	GENMASK(9, 0)
#define LPUART_MATCH_MA1(x)	FIELD_PREP(LPUART_MATCH_MA1_MASK, x)

#define LPUART_MATCH_MA2_MASK	GENMASK(25, 16)
#define LPUART_MATCH_MA2(x)	FIELD_PREP(LPUART_MATCH_MA2_MASK, x)

/* LPUART_MODIR */
#define LPUART_MODIR_TXCTSE		BIT(0)
#define LPUART_MODIR_TXRTSE		BIT(1)
#define LPUART_MODIR_TXRTSPOL		BIT(2)
#define LPUART_MODIR_RXRTSE		BIT(3)
#define LPUART_MODIR_TXCTSC		BIT(4)
#define LPUART_MODIR_TXCTSSRC		BIT(5)

#define LPUART_MODIR_RTSWATER_MASK	GENMASK(15, 8)
#define LPUART_MODIR_RTSWATER(x)	FIELD_PREP(LPUART_MODIR_RTSWATER_MASK, x)
#define LPUART_MODIR_TNP_MASK		GENMASK(17, 16)
#define LPUART_MODIR_TNP(x)		FIELD_PREP(LPUART_MODIR_TNP_MASK, (x) - 1)

#define LPUART_MODIR_IREN		BIT(18)

/* LPUART_FIFO */
#define LPUART_FIFO_RXFIFOSIZE_MASK	GENMASK(2, 0)
#define LPUART_FIFO_RXFIFOSIZE(x)	FIELD_PREP(LPUART_FIFO_RXFIFOSIZE_MASK, x)
#define LPUART_FIFO_RXFIFOSIZE_1	LPUART_FIFO_RXFIFOSIZE(0)
#define LPUART_FIFO_RXFIFOSIZE_4	LPUART_FIFO_RXFIFOSIZE(1)
#define LPUART_FIFO_RXFIFOSIZE_8	LPUART_FIFO_RXFIFOSIZE(2)
#define LPUART_FIFO_RXFIFOSIZE_16	LPUART_FIFO_RXFIFOSIZE(3)
#define LPUART_FIFO_RXFIFOSIZE_32	LPUART_FIFO_RXFIFOSIZE(4)
#define LPUART_FIFO_RXFIFOSIZE_64	LPUART_FIFO_RXFIFOSIZE(5)
#define LPUART_FIFO_RXFIFOSIZE_128	LPUART_FIFO_RXFIFOSIZE(6)
#define LPUART_FIFO_RXFIFOSIZE_256	LPUART_FIFO_RXFIFOSIZE(7)

#define LPUART_FIFO_RXFE		BIT(3)

#define LPUART_FIFO_TXFIFOSIZE_MASK	GENMASK(6, 4)
#define LPUART_FIFO_TXFIFOSIZE(x)	FIELD_PREP(LPUART_FIFO_TXFIFOSIZE_MASK, x)
#define LPUART_FIFO_TXFIFOSIZE_1	LPUART_FIFO_TXFIFOSIZE(0)
#define LPUART_FIFO_TXFIFOSIZE_4	LPUART_FIFO_TXFIFOSIZE(1)
#define LPUART_FIFO_TXFIFOSIZE_8	LPUART_FIFO_TXFIFOSIZE(2)
#define LPUART_FIFO_TXFIFOSIZE_16	LPUART_FIFO_TXFIFOSIZE(3)
#define LPUART_FIFO_TXFIFOSIZE_32	LPUART_FIFO_TXFIFOSIZE(4)
#define LPUART_FIFO_TXFIFOSIZE_64	LPUART_FIFO_TXFIFOSIZE(5)
#define LPUART_FIFO_TXFIFOSIZE_128	LPUART_FIFO_TXFIFOSIZE(6)
#define LPUART_FIFO_TXFIFOSIZE_256	LPUART_FIFO_TXFIFOSIZE(7)

#define LPUART_FIFO_TXFE		BIT(7)
#define LPUART_FIFO_RXUFE		BIT(8)
#define LPUART_FIFO_TXOFE		BIT(9)

#define LPUART_FIFO_RXIDEN_MASK		GENMASK(12, 10)
#define LPUART_FIFO_RXIDEN(x)		FIELD_PREP(LPUART_FIFO_RXIDEN_MASK, x)
#define LPUART_FIFO_RXIDEN_DIS		LPUART_FIFO_RXIDEN(0)
#define LPUART_FIFO_RXIDEN_1CH		LPUART_FIFO_RXIDEN(1)
#define LPUART_FIFO_RXIDEN_2CH		LPUART_FIFO_RXIDEN(2)
#define LPUART_FIFO_RXIDEN_4CH		LPUART_FIFO_RXIDEN(3)
#define LPUART_FIFO_RXIDEN_8CH		LPUART_FIFO_RXIDEN(4)
#define LPUART_FIFO_RXIDEN_16CH		LPUART_FIFO_RXIDEN(5)
#define LPUART_FIFO_RXIDEN_32CH		LPUART_FIFO_RXIDEN(6)
#define LPUART_FIFO_RXIDEN_64CH		LPUART_FIFO_RXIDEN(7)

#define LPUART_FIFO_RXFLUSH		BIT(14)
#define LPUART_FIFO_TXFLUSH		BIT(15)
#define LPUART_FIFO_RXUF		BIT(16)
#define LPUART_FIFO_TXOF		BIT(17)

#define LPUART_FIFO_RXEMPT		BIT(21)
#define LPUART_FIFO_TXEMPT		BIT(23)

/* LPUART_WATER */
#define LPUART_WATER_TXWATER_MASK	GENMASK(7, 0)
#define LPUART_WATER_TXWATER(x)		FIELD_PREP(LPUART_WATER_TXWATER_MASK, x)

#define LPUART_WATER_TXCOUNT_MASK	GENMASK(15, 8)
#define LPUART_WATER_TXCOUNT(x)		FIELD_PREP(LPUART_WATER_TXCOUNT_MASK, x)

#define LPUART_WATER_RXWATER_MASK	GENMASK(23, 16)
#define LPUART_WATER_RXWATER(x)		FIELD_PREP(LPUART_WATER_RXWATER_MASK, x)

#define LPUART_WATER_RXCOUNT_MASK	GENMASK(31, 24)
#define LPUART_WATER_RXCOUNT(x)		FIELD_PREP(LPUART_WATER_RXCOUNT_MASK, x)

/* TIM */
#define TPM_REG32(_t, _a)		REG32(0x40038000 + 0x1000 * (_t) + (_a))
#define TPM_CH_REG32(_t, _ch, _a)	TPM_REG32(_t, 0xc + 8 * (_ch) + (_a))

#define TPM_SC(_t)		TPM_REG32(_t, 0x0)
#define TPM_CNT(_t)		TPM_REG32(_t, 0x4)
#define TPM_MOD(_t)		TPM_REG32(_t, 0x8)
#define TPM_CnSC(_t, _ch)	TPM_CH_REG32(_t, _ch, 0x0)
#define TPM_CnV(_t, _ch)	TPM_CH_REG32(_t, _ch, 0x4)
#define TPM_STATUS(_t)		TPM_REG32(_t, 0x50)
#define TPM_COMBINE(_t)		TPM_REG32(_t, 0x64)
#define TPM_POL(_t)		TPM_REG32(_t, 0x70)
#define TPM_FILTER(_t)		TPM_REG32(_t, 0x78)
#define TPM_CONF(_t)		TPM_REG32(_t, 0x84)

/* TPM_SC */
#define TPM_SC_PS_MASK			GENMASK(2, 0)
#define TPM_SC_PS(x)			FIELD_PREP(TPM_SC_PS_MASK, x)
#define TPM_SC_PS_DIV1			TPM_SC_PS(0)
#define TPM_SC_PS_DIV2			TPM_SC_PS(1)
#define TPM_SC_PS_DIV4			TPM_SC_PS(2)
#define TPM_SC_PS_DIV8			TPM_SC_PS(3)
#define TPM_SC_PS_DIV16			TPM_SC_PS(4)
#define TPM_SC_PS_DIV32			TPM_SC_PS(5)
#define TPM_SC_PS_DIV64			TPM_SC_PS(6)
#define TPM_SC_PS_DIV128		TPM_SC_PS(7)

#define TPM_SC_CMOD_MASK		GENMASK(4, 3)
#define TPM_SC_CMOD(x)			FIELD_PREP(TPM_SC_CMOD_MASK, x)
#define TPM_SC_CMOD_DIS			TPM_SC_CMOD(0)
#define TPM_SC_CMOD_CLK			TPM_SC_CMOD(1)
#define TPM_SC_CMOD_EXTCLK		TPM_SC_CMOD(2)

#define TPM_SC_CPWMS			BIT(5)
#define TPM_SC_TOIE			BIT(6)
#define TPM_SC_TOF			BIT(7)
#define TPM_SC_DMA			BIT(8)

/* TPM_CnSC */
#define TPM_CnSC_DMA		BIT(0)
#define TPM_CnSC_ELSA		BIT(2)
#define TPM_CnSC_ELSB		BIT(3)
#define TPM_CnSC_MSA		BIT(4)
#define TPM_CnSC_MSB		BIT(5)
#define TPM_CnSC_CHIE		BIT(6)
#define TPM_CnSC_CHF		BIT(7)

/* TPM_STATUS */
#define TPM_STATUS_CHnF(_ch)	BIT((_ch) & 0x7)
#define TPM_STATUS_TOF		BIT(8)

/* TPM_COMBINE */
#define TPM_COMBINE_COMBINE(_n)	BIT((((_n) & 0x3) << 3))
#define TPM_COMBINE_COMSWAP(_n)	BIT((((_n) & 0x3) << 3) + 1)

/* TPM_POL */
#define TPM_POL_POLn(_ch)	BIT((_ch) & 0x7)

/* TPM_FILTER */
#define TPM_FILTER_CHnFVAL_MASK(_ch)	GENMASK(4 * ((_ch) & 0x7) + 3, 4 * ((_ch) & 0x7))
#define TPM_FILTER_CHnFVAL(_ch, _x)	FIELD_PREP(TPM_FILTER_CHnFVAL_MASK(_ch), _x)

/* TPM_CONF */
#define TPM_CONF_DOZEEN			BIT(5)

#define TPM_CONF_DBGMODE_MASK		GENMASK(7, 6)
#define TPM_CONF_DBGMODE(x)		FIELD_PREP(TPM_CONF_DBGMODE_MASK, x)
#define TPM_CONF_DBGMODE_PAUSE		TPM_CONF_DBGMODE(0)
#define TPM_CONF_DBGMODE_CONT		TPM_CONF_DBGMODE(3)

#define TPM_CONF_GTBSYNC		BIT(8)
#define TPM_CONF_GTBEEN			BIT(9)
#define TPM_CONF_CSOT			BIT(16)
#define TPM_CONF_CSOO			BIT(17)
#define TPM_CONF_CROT			BIT(18)
#define TPM_CONF_CPOT			BIT(19)
#define TPM_CONF_TRGPOL			BIT(22)
#define TPM_CONF_TRGSRC			BIT(23)

#define TPM_CONF_TRGSEL_MASK		GENMASK(27, 24)
#define TPM_CONF_TRGSEL(x)		FIELD_PREP(TPM_CONF_TRGSEL_MASK, x)
#define TPM_CONF_TRGSEL_EX_TRG_IN	TPM_CONF_TRGSEL(0)
#define TPM_CONF_TRGSEL_CMP0		TPM_CONF_TRGSEL(1)
#define TPM_CONF_TRGSEL_CMP1		TPM_CONF_TRGSEL(2)
#define TPM_CONF_TRGSEL_PIT0_TRG0	TPM_CONF_TRGSEL(4)
#define TPM_CONF_TRGSEL_PIT0_TRG1	TPM_CONF_TRGSEL(5)
#define TPM_CONF_TRGSEL_PIT0_TRG2	TPM_CONF_TRGSEL(6)
#define TPM_CONF_TRGSEL_PIT0_TRG3	TPM_CONF_TRGSEL(7)
#define TPM_CONF_TRGSEL_TPM0		TPM_CONF_TRGSEL(8)
#define TPM_CONF_TRGSEL_TPM1		TPM_CONF_TRGSEL(9)
#define TPM_CONF_TRGSEL_TPM2		TPM_CONF_TRGSEL(10)
#define TPM_CONF_TRGSEL_RTC_ALRM	TPM_CONF_TRGSEL(12)
#define TPM_CONF_TRGSEL_RTC_SECS	TPM_CONF_TRGSEL(13)
#define TPM_CONF_TRGSEL_LPTMR0		TPM_CONF_TRGSEL(14)

/* PIT */
#define PIT_REG32(_a)		REG32(0x40037000 + (_a))
#define PIT_CH_REG32(_ch, _a)	PIT_REG32(0x100 + 0x10 * (_ch) + (_a))

#define PIT_MCR			PIT_REG32(0x0)
#define PIT_LTMR64H		PIT_REG32(0xe0)
#define PIT_LTMR64L		PIT_REG32(0xe4)
#define PIT_LDVAL(_ch)		PIT_CH_REG32(_ch, 0x0)
#define PIT_CVAL(_ch)		PIT_CH_REG32(_ch, 0x4)
#define PIT_TCTRL(_ch)		PIT_CH_REG32(_ch, 0x8)
#define PIT_TFLG(_ch)		PIT_CH_REG32(_ch, 0xc)

/* PIT_MCR */
#define PIT_MCR_FRZ	BIT(0)
#define PIT_MCR_MDIS	BIT(1)

/* PIT_TCTRL */
#define PIT_TCTRL_TEN	BIT(0)
#define PIT_TCTRL_TIE	BIT(1)
#define PIT_TCTRL_CHN	BIT(2)

/* PIT_TFLG */
#define PIT_TFLG_TIF	BIT(0)

/* SPI */
#define SPI_REG32(_s, _a)	REG32(0x4002c000 + 0x1000 * (_s) + (_a))

#define SPI_MCR(_s)		SPI_REG32(_s, 0x0)
#define SPI_TCR(_s)		SPI_REG32(_s, 0x8)
#define SPI_CTAR(_s, _n)	SPI_REG32(_s, 0xc + 0x4 * (_n))
#define SPI_SR(_s)		SPI_REG32(_s, 0x2c)
#define SPI_RSER(_s)		SPI_REG32(_s, 0x30)
#define SPI_PUSHR(_s)		SPI_REG32(_s, 0x34)
#define SPI_POPR(_s)		SPI_REG32(_s, 0x38)
#define SPI_TXFR(_s, _n)	SPI_REG32(_s, 0x3c + 0x4 * (_n))
#define SPI_RXFR(_s, _n)	SPI_REG32(_s, 0x7c + 0x4 * (_n))

/* SPI_MCR */
#define SPI_MCR_HALT		BIT(0)

#define SPI_MCR_SMPL_PT_MASK	GENMASK(9, 8)
#define SPI_MCR_SMPL_PT(x)	FIELD_PREP(SPI_MCR_SMPL_PT_MASK, x)

#define SPI_MCR_CLR_RXF		BIT(10)
#define SPI_MCR_CLR_TXF		BIT(11)
#define SPI_MCR_DIS_RXF		BIT(12)
#define SPI_MCR_DIS_TXF		BIT(13)
#define SPI_MCR_MDIS		BIT(14)
#define SPI_MCR_DOZE		BIT(15)

#define SPI_MCR_PCSIS_MASK	GENMASK(21, 16)
#define SPI_MCR_PCSIS(x)	FIELD_PREP(SPI_MCR_PCSIS_MASK, x)
#define SPI_MCR_PCSIS_CS(x)	SPI_MCR_PCSIS(BIT(x))

#define SPI_MCR_ROOE		BIT(24)
#define SPI_MCR_PCSSE		BIT(25)
#define SPI_MCR_MTFE		BIT(26)
#define SPI_MCR_FRZ		BIT(27)

#define SPI_MCR_DCONF_MASK	GENMASK(29, 28)
#define SPI_MCR_DCONF(x)	FIELD_PREP(SPI_MCR_DCONF_MASK, x)
#define SPI_MCR_DCONF_SPI	SPI_MCR_DCONF(0)

#define SPI_MCR_CONT_SCKE	BIT(30)
#define SPI_MCR_MSTR		BIT(31)

/* SPI_TCR */
#define SPI_TCR_SPI_TCNT_MASK	GENMASK(31, 16)
#define SPI_TCR_SPI_TCNT(x)	FIELD_PREP(SPI_TCR_SPI_TCNT_MASK, x)

/* SPI_CTAR */
#define SPI_CTAR_BR_MASK	GENMASK(3, 0)
#define SPI_CTAR_BR(x)		FIELD_PREP(SPI_CTAR_BR_MASK, x)
#define SPI_CTAR_BR_2		SPI_CTAR_BR(0)
#define SPI_CTAR_BR_4		SPI_CTAR_BR(1)
#define SPI_CTAR_BR_6		SPI_CTAR_BR(2)
#define SPI_CTAR_BR_8		SPI_CTAR_BR(3)
#define SPI_CTAR_BR_16		SPI_CTAR_BR(4)
#define SPI_CTAR_BR_32		SPI_CTAR_BR(5)
#define SPI_CTAR_BR_64		SPI_CTAR_BR(6)
#define SPI_CTAR_BR_128		SPI_CTAR_BR(7)
#define SPI_CTAR_BR_256		SPI_CTAR_BR(8)
#define SPI_CTAR_BR_512		SPI_CTAR_BR(9)
#define SPI_CTAR_BR_1024	SPI_CTAR_BR(10)
#define SPI_CTAR_BR_2048	SPI_CTAR_BR(11)
#define SPI_CTAR_BR_4096	SPI_CTAR_BR(12)
#define SPI_CTAR_BR_8192	SPI_CTAR_BR(13)
#define SPI_CTAR_BR_16384	SPI_CTAR_BR(14)
#define SPI_CTAR_BR_32768	SPI_CTAR_BR(15)

#define SPI_CTAR_DT_MASK	GENMASK(7, 4)
#define SPI_CTAR_DT(x)		FIELD_PREP(SPI_CTAR_DT_MASK, x)

#define SPI_CTAR_ASC_MASK	GENMASK(11, 8)
#define SPI_CTAR_ASC(x)		FIELD_PREP(SPI_CTAR_ASC_MASK, x)

#define SPI_CTAR_CSSCK_MASK	GENMASK(15, 12)
#define SPI_CTAR_CSSCK(x)	FIELD_PREP(SPI_CTAR_CSSCK_MASK, x)
#define SPI_CTAR_CSSCK_2	SPI_CTAR_CSSCK(0)
#define SPI_CTAR_CSSCK_4	SPI_CTAR_CSSCK(1)
#define SPI_CTAR_CSSCK_8	SPI_CTAR_CSSCK(2)
#define SPI_CTAR_CSSCK_16	SPI_CTAR_CSSCK(3)
#define SPI_CTAR_CSSCK_32	SPI_CTAR_CSSCK(4)
#define SPI_CTAR_CSSCK_64	SPI_CTAR_CSSCK(5)
#define SPI_CTAR_CSSCK_128	SPI_CTAR_CSSCK(6)
#define SPI_CTAR_CSSCK_256	SPI_CTAR_CSSCK(7)
#define SPI_CTAR_CSSCK_512	SPI_CTAR_CSSCK(8)
#define SPI_CTAR_CSSCK_1024	SPI_CTAR_CSSCK(9)
#define SPI_CTAR_CSSCK_2048	SPI_CTAR_CSSCK(10)
#define SPI_CTAR_CSSCK_4096	SPI_CTAR_CSSCK(11)
#define SPI_CTAR_CSSCK_8192	SPI_CTAR_CSSCK(12)
#define SPI_CTAR_CSSCK_16384	SPI_CTAR_CSSCK(13)
#define SPI_CTAR_CSSCK_32768	SPI_CTAR_CSSCK(14)
#define SPI_CTAR_CSSCK_65536	SPI_CTAR_CSSCK(15)

#define SPI_CTAR_PBR_MASK	GENMASK(17, 16)
#define SPI_CTAR_PBR(x)		FIELD_PREP(SPI_CTAR_PBR_MASK, x)
#define SPI_CTAR_PBR_2		SPI_CTAR_PBR(0)
#define SPI_CTAR_PBR_3		SPI_CTAR_PBR(1)
#define SPI_CTAR_PBR_5		SPI_CTAR_PBR(2)
#define SPI_CTAR_PBR_7		SPI_CTAR_PBR(3)

#define SPI_CTAR_PDT_MASK	GENMASK(19, 18)
#define SPI_CTAR_PDT(x)		FIELD_PREP(SPI_CTAR_PDT_MASK, x)
#define SPI_CTAR_PDT_1		SPI_CTAR_PDT(0)
#define SPI_CTAR_PDT_3		SPI_CTAR_PDT(1)
#define SPI_CTAR_PDT_5		SPI_CTAR_PDT(2)
#define SPI_CTAR_PDT_7		SPI_CTAR_PDT(3)

#define SPI_CTAR_PASC_MASK	GENMASK(21, 20)
#define SPI_CTAR_PASC(x)	FIELD_PREP(SPI_CTAR_PASC_MASK, x)
#define SPI_CTAR_PASC_1		SPI_CTAR_PASC(0)
#define SPI_CTAR_PASC_3		SPI_CTAR_PASC(1)
#define SPI_CTAR_PASC_5		SPI_CTAR_PASC(2)
#define SPI_CTAR_PASC_7		SPI_CTAR_PASC(3)

#define SPI_CTAR_PCSSCK_MASK	GENMASK(23, 22)
#define SPI_CTAR_PCSSCK(x)	FIELD_PREP(SPI_CTAR_PCSSCK_MASK, x)
#define SPI_CTAR_PCSSCK_1	SPI_CTAR_PCSSCK(0)
#define SPI_CTAR_PCSSCK_3	SPI_CTAR_PCSSCK(1)
#define SPI_CTAR_PCSSCK_5	SPI_CTAR_PCSSCK(2)
#define SPI_CTAR_PCSSCK_7	SPI_CTAR_PCSSCK(3)

#define SPI_CTAR_LSBFE		BIT(24)
#define SPI_CTAR_CPHA		BIT(25)
#define SPI_CTAR_CPOL		BIT(26)

#define SPI_CTAR_FMSZ_MASK	GENMASK(30, 27)
#define SPI_CTAR_FMSZ(x)	FIELD_PREP(SPI_CTAR_FMSZ_MASK, x)

#define SPI_CTAR_DBR		BIT(31)

/* SPI_SR */
#define SPI_SR_POPNXTPTR_MASK	GENMASK(3, 0)
#define SPI_SR_RXCTR_MASK	GENMASK(7, 4)
#define SPI_SR_TXNXTPTR_MASK	GENMASK(11, 8)
#define SPI_SR_TXCTR_MASK	GENMASK(15, 12)

#define SPI_SR_RFDF		BIT(17)
#define SPI_SR_RFOF		BIT(19)
#define SPI_SR_TFFF		BIT(25)
#define SPI_SR_TFUF		BIT(27)
#define SPI_SR_EOQF		BIT(28)
#define SPI_SR_TXRXS		BIT(30)
#define SPI_SR_TCF		BIT(31)

/* SPI_RSER */
#define SPI_RSER_RFDF_DIRS	BIT(16)
#define SPI_RSER_RFDF_RE	BIT(17)
#define SPI_RSER_RFOF_RE	BIT(19)
#define SPI_RSER_TFFF_DIRS	BIT(24)
#define SPI_RSER_TFFF_RE	BIT(25)
#define SPI_RSER_TFUF_RE	BIT(27)
#define SPI_RSER_EOQF_RE	BIT(28)
#define SPI_RSER_TCF_RE		BIT(31)

/* SPI_PUSHR */
#define SPI_PUSHR_TXDATA_MASK	GENMASK(15, 0)
#define SPI_PUSHR_TXDATA(x)	FIELD_PREP(SPI_PUSHR_TXDATA_MASK, x)

#define SPI_PUSHR_PCS_MASK	GENMASK(21, 16)
#define SPI_PUSHR_PCS(x)	FIELD_PREP(SPI_PUSHR_PCS_MASK, x)
#define SPI_PUSHR_PCS_CS(x)	SPI_PUSHR_PCS(BIT(x))

#define SPI_PUSHR_CTCNT		BIT(26)
#define SPI_PUSHR_EOQ		BIT(27)

#define SPI_PUSHR_CTAS_MASK	GENMASK(30, 28)
#define SPI_PUSHR_CTAS(x)	FIELD_PREP(SPI_PUSHR_CTAS_MASK, x)

#define SPI_PUSHR_CONT		BIT(31)

/* PORT */
#define PORT_REG32(_p, _a)	REG32(0x40049000 + 0x1000 * (_p) + (_a))

#define PORT_PCR(_p, _n)	PORT_REG32(_p, 0x4 * (_n))
#define PORT_GPCLR(_p)		PORT_REG32(_p, 0x80)
#define PORT_GPCHR(_p)		PORT_REG32(_p, 0x84)
#define PORT_GICLR(_p)		PORT_REG32(_p, 0x88)
#define PORT_GICHR(_p)		PORT_REG32(_p, 0x8c)
#define PORT_ISFR(_p)		PORT_REG32(_p, 0xa0)

/* PORT_PCR */
#define PORT_PCR_PS			BIT(0)
#define PORT_PCR_PE			BIT(1)
#define PORT_PCR_SRE			BIT(2)
#define PORT_PCR_PFE			BIT(4)
#define PORT_PCR_ODE			BIT(5)

#define PORT_PCR_MUX_MASK		GENMASK(10, 8)
#define PORT_PCR_MUX(x)			FIELD_PREP(PORT_PCR_MUX_MASK, x)
#define PORT_PCR_MUX_ANALOG		PORT_PCR_MUX(0)
#define PORT_PCR_MUX_GPIO		PORT_PCR_MUX(1)

#define PORT_PCR_LK			BIT(15)

#define PORT_PCR_IRQC_MASK		GENMASK(19, 16)
#define PORT_PCR_IRQC(x)		FIELD_PREP(PORT_PCR_IRQC_MASK, x)
#define PORT_PCR_IRQC_DIS		PORT_PCR_IRQC(0)
#define PORT_PCR_IRQC_DMA_RISING	PORT_PCR_IRQC(1)
#define PORT_PCR_IRQC_DMA_FALLING	PORT_PCR_IRQC(2)
#define PORT_PCR_IRQC_DMA_BOTH		PORT_PCR_IRQC(3)
#define PORT_PCR_IRQC_RISING_NOIRQ	PORT_PCR_IRQC(5)
#define PORT_PCR_IRQC_FALLING_NOIRQ	PORT_PCR_IRQC(6)
#define PORT_PCR_IRQC_BOTH_NOIRQ	PORT_PCR_IRQC(7)
#define PORT_PCR_IRQC_LOW		PORT_PCR_IRQC(8)
#define PORT_PCR_IRQC_RISING		PORT_PCR_IRQC(9)
#define PORT_PCR_IRQC_FALLING		PORT_PCR_IRQC(10)
#define PORT_PCR_IRQC_BOTH		PORT_PCR_IRQC(11)
#define PORT_PCR_IRQC_HIGH		PORT_PCR_IRQC(12)
#define PORT_PCR_IRQC_HIGH_TRIGGER	PORT_PCR_IRQC(13)
#define PORT_PCR_IRQC_LOW_TRIGGER	PORT_PCR_IRQC(14)

#define PORT_PCR_ISF		BIT(24)

/* GPIO */
#define GPIO_REG32(_g, _a)	REG32(0x400ff000 + 0x40 * (_g) + (_a))

#define GPIO_PDOR(_g)		GPIO_REG32(_g, 0x0)
#define GPIO_PSOR(_g)		GPIO_REG32(_g, 0x4)
#define GPIO_PCOR(_g)		GPIO_REG32(_g, 0x8)
#define GPIO_PTOR(_g)		GPIO_REG32(_g, 0xc)
#define GPIO_PDIR(_g)		GPIO_REG32(_g, 0x10)
#define GPIO_PDDR(_g)		GPIO_REG32(_g, 0x14)

/* I2C */
#define I2C_REG8(_i, _a)	REG8(0x40066000 + 0x1000 * (_i) + (_a))

#define I2C_A1(_i)	I2C_REG8(_i, 0x0)
#define I2C_F(_i)	I2C_REG8(_i, 0x1)
#define I2C_C1(_i)	I2C_REG8(_i, 0x2)
#define I2C_S(_i)	I2C_REG8(_i, 0x3)
#define I2C_D(_i)	I2C_REG8(_i, 0x4)
#define I2C_C2(_i)	I2C_REG8(_i, 0x5)
#define I2C_FLT(_i)	I2C_REG8(_i, 0x6)
#define I2C_RA(_i)	I2C_REG8(_i, 0x7)
#define I2C_SMB(_i)	I2C_REG8(_i, 0x8)
#define I2C_A2(_i)	I2C_REG8(_i, 0x9)
#define I2C_SLTH(_i)	I2C_REG8(_i, 0xa)
#define I2C_SLTL(_i)	I2C_REG8(_i, 0xb)
#define I2C_S2(_i)	I2C_REG8(_i, 0xc)

/* I2C_A1 */
#define I2C_A1_AD_MASK	GENMASK8(7, 1)
#define I2C_A1_AD(x)	FIELD_PREP(I2C_A1_AD_MASK, x)

/* I2C_F */
#define I2C_F_ICR_MASK	GENMASK8(5, 0)
#define I2C_F_ICR(x)	FIELD_PREP(I2C_F_ICR_MASK, x)

#define I2C_F_MULT_MASK	GENMASK8(7, 6)
#define I2C_F_MULT(x)	FIELD_PREP(I2C_F_MULT_MASK, x)

/* I2C_C1 */
#define I2C_C1_DMAEN	BIT8(0)
#define I2C_C1_WUEN	BIT8(1)
#define I2C_C1_RSTA	BIT8(2)
#define I2C_C1_TXAK	BIT8(3)
#define I2C_C1_TX	BIT8(4)
#define I2C_C1_MST	BIT8(5)
#define I2C_C1_IICIE	BIT8(6)
#define I2C_C1_IICEN	BIT8(7)

/* I2C_S */
#define I2C_S_RXAK	BIT8(0)
#define I2C_S_IICIF	BIT8(1)
#define I2C_S_SRW	BIT8(2)
#define I2C_S_RAM	BIT8(3)
#define I2C_S_ARBL	BIT8(4)
#define I2C_S_BUSY	BIT8(5)
#define I2C_S_IAAS	BIT8(6)
#define I2C_S_TCF	BIT8(7)

/* I2C_C2 */
#define I2C_C2_AD_MASK	GENMASK8(2, 0)
#define I2C_C2_AD(x)	FIELD_PREP(I2C_C2_AD_MASK, x)

#define I2C_C2_RMEN	BIT8(3)
#define I2C_C2_SBRC	BIT8(4)
#define I2C_C2_HDRS	BIT8(5)
#define I2C_C2_ADEXT	BIT8(6)
#define I2C_C2_GCAEN	BIT8(7)

/* I2C_FLT */
#define I2C_FLT_FLT_MASK	GENMASK8(3, 0)
#define I2C_FLT_FLT(x)		FIELD_PREP(I2C_FLT_FLT_MASK, x)

#define I2C_FLT_STARTF		BIT8(4)
#define I2C_FLT_SSIE		BIT8(5)
#define I2C_FLT_STOPF		BIT8(6)
#define I2C_FLT_SHEN		BIT8(7)

/* I2C_RA */
#define I2C_RA_RAD_MASK	GENMASK8(7, 1)
#define I2C_RA_RAD(x)	FIELD_PREP(I2C_RA_RAD_MASK, x)

/* I2C_SMB */
#define I2C_SMB_SHTF2IE	BIT8(0)
#define I2C_SMB_SHTF2	BIT8(1)
#define I2C_SMB_SHTF1	BIT8(2)
#define I2C_SMB_SLTF	BIT8(3)
#define I2C_SMB_TCKSEL	BIT8(4)
#define I2C_SMB_SIICAEN	BIT8(5)
#define I2C_SMB_ALERTEN	BIT8(6)
#define I2C_SMB_FACK	BIT8(7)

/* I2C_A2 */
#define I2C_A2_SAD_MASK	GENMASK8(7, 1)
#define I2C_A2_SAD(x)	FIELD_PREP(I2C_A2_SAD_MASK, x)

/* I2C_S2 */
#define I2C_S2_EMPTY	BIT8(0)
#define I2C_S2_ERROR	BIT8(1)
#define I2C_S2_DFEN	BIT8(2)

/* CRC */
#define CRC_REG32(_a)	REG32(0x40032000 + (_a))

#define CRC_DATA	CRC_REG32(0x0)
#define CRC_GPOLY	CRC_REG32(0x4)
#define CRC_CTRL	CRC_REG32(0x8)

/* CRC_CTRL */
#define CRC_CTRL_TCRC		BIT(24)
#define CRC_CTRL_WAS		BIT(25)
#define CRC_CTRL_FXOR		BIT(26)

#define CRC_CTRL_TOTR_MASK	GENMASK(29, 28)
#define CRC_CTRL_TOTR(x)	FIELD_PREP(CRC_CTRL_TOTR_MASK, x)
#define CRC_CTRL_TOTR_NO	CRC_CTRL_TOTR(0)
#define CRC_CTRL_TOTR_BITS	CRC_CTRL_TOTR(1)
#define CRC_CTRL_TOTR_BOTH	CRC_CTRL_TOTR(2)
#define CRC_CTRL_TOTR_BYTES	CRC_CTRL_TOTR(3)

#define CRC_CTRL_TOT_MASK	GENMASK(31, 30)
#define CRC_CTRL_TOT(x)		FIELD_PREP(CRC_CTRL_TOT_MASK, x)
#define CRC_CTRL_TOT_NO		CRC_CTRL_TOT(0)
#define CRC_CTRL_TOT_BITS	CRC_CTRL_TOT(1)
#define CRC_CTRL_TOT_BOTH	CRC_CTRL_TOT(2)
#define CRC_CTRL_TOT_BYTES	CRC_CTRL_TOT(3)

/* SMC */
#define SMC_REG8(_a)	REG8(0x4007e000 + (_a))

#define SMC_PMPROT	SMC_REG8(0x0)
#define SMC_PMCTRL	SMC_REG8(0x1)
#define SMC_STOPCTRL	SMC_REG8(0x2)
#define SMC_PMSTAT	SMC_REG8(0x3)

/* SMC_PMPROT */
#define SMC_PMPROT_AVLLS	BIT8(1)
#define SMC_PMPROT_ALLS		BIT8(3)
#define SMC_PMPROT_AVLP		BIT8(5)
#define SMC_PMPROT_AHSRUN	BIT8(7)

/* SMC_PMCTRL */
#define SMC_PMCTRL_STOPM_MASK	GENMASK8(2, 0)
#define SMC_PMCTRL_STOPM(x)	FIELD_PREP(SMC_PMCTRL_STOPM_MASK, x)
#define SMC_PMCTRL_STOPM_STOP	SMC_PMCTRL_STOPM(0)
#define SMC_PMCTRL_STOPM_VLPS	SMC_PMCTRL_STOPM(2)
#define SMC_PMCTRL_STOPM_LLS	SMC_PMCTRL_STOPM(3)
#define SMC_PMCTRL_STOPM_VLLS	SMC_PMCTRL_STOPM(4)

#define SMC_PMCTRL_STOPA	BIT8(3)

#define SMC_PMCTRL_RUNM_MASK	GENMASK8(6, 5)
#define SMC_PMCTRL_RUNM(x)	FIELD_PREP(SMC_PMCTRL_RUNM_MASK, x)
#define SMC_PMCTRL_RUNM_RUN	SMC_PMCTRL_RUNM(0)
#define SMC_PMCTRL_RUNM_VLPR	SMC_PMCTRL_RUNM(2)
#define SMC_PMCTRL_RUNM_HSRUN	SMC_PMCTRL_RUNM(3)

/* SMC_STOPCTRL */
#define SMC_STOPCTRL_LLSM_MASK		GENMASK8(2, 0)
#define SMC_STOPCTRL_LLSM(x)		FIELD_PREP(SMC_STOPCTRL_LLSM_MASK, x)

#define SMC_STOPCTRL_LPOPO		BIT8(3)
#define SMC_STOPCTRL_PORPO		BIT8(5)

#define SMC_STOPCTRL_PSTOPO_MASK	GENMASK8(7, 6)
#define SMC_STOPCTRL_PSTOPO(x)		FIELD_PREP(SMC_STOPCTRL_PSTOPO_MASK, x)
#define SMC_STOPCTRL_PSTOPO_STOP	SMC_STOPCTRL_PSTOPO(0)
#define SMC_STOPCTRL_PSTOPO_PSTOP1	SMC_STOPCTRL_PSTOPO(1)
#define SMC_STOPCTRL_PSTOPO_PSTOP2	SMC_STOPCTRL_PSTOPO(2)

/* SMC_PMSTAT */
#define SMC_PMSTAT_RUN		BIT8(0)
#define SMC_PMSTAT_STOP		BIT8(1)
#define SMC_PMSTAT_VLPR		BIT8(2)
#define SMC_PMSTAT_VLPW		BIT8(3)
#define SMC_PMSTAT_VLPS		BIT8(4)
#define SMC_PMSTAT_LLS		BIT8(5)
#define SMC_PMSTAT_VLLS		BIT8(6)
#define SMC_PMSTAT_HSRUN	BIT8(7)

/* RFSYS */
#define RFSYS(_n)	REG32(0x40041000 + (_n) * 4)

/* MCM */
#define MCM_REG32(_a)	REG32(0xf0003000 + (_a))

/* MCM_PLASC and MCM_PLAMC are 16-bit wide, don't define them now */
#define MCM_PLACR	MCM_REG32(0xc)
#define MCM_CPO		MCM_REG32(0x40)

/* MCM_PLACR */
#define MCM_PLACR_ARB	BIT(9)
#define MCM_PLACR_CFCC	BIT(10)
#define MCM_PLACR_DFCDA	BIT(11)
#define MCM_PLACR_DFCIC	BIT(12)
#define MCM_PLACR_DFCC	BIT(13)
#define MCM_PLACR_EFDS	BIT(14)
#define MCM_PLACR_DFCS	BIT(15)
#define MCM_PLACR_ESFC	BIT(16)

/* MCM_CPO */
#define MCM_CPO_CPOREQ	BIT(0)
#define MCM_CPO_CPOACK	BIT(1)
#define MCM_CPO_CPOWOI	BIT(2)

/* MPU */
#define MPU_REG32(_a)	REG32(0x4000d000 + (_a))

#define MPU_CESR		MPU_REG32(0x0)
#define MPU_EAR(_s)		MPU_REG32(0x10 + 0x8 * (_s))
#define MPU_EDR(_s)		MPU_REG32(0x14 + 0x8 * (_s))
#define MPU_RGDn_WORD0(_r)	MPU_REG32(0x400 + 0x10 * (_r))
#define MPU_RGDn_WORD1(_r)	MPU_REG32(0x404 + 0x10 * (_r))
#define MPU_RGDn_WORD2(_r)	MPU_REG32(0x408 + 0x10 * (_r))
#define MPU_RGDn_WORD3(_r)	MPU_REG32(0x40c + 0x10 * (_r))
#define MPU_RGDAACn(_r)		MPU_REG32(0x800 + 0x4 * (_r))

/* MPU_CESR */
#define MPU_CESR_VLD		BIT(0)

#define MPU_CESR_NRGD_MASK	GENMASK(11, 8)
#define MPU_CESR_NRGD(x)	FIELD_PREP(MPU_CESR_NRGD_MASK, x)
#define MPU_CESR_NRGD_8_DESCS	MPU_CESR_NRGD(0)
#define MPU_CESR_NRGD_12_DESCS	MPU_CESR_NRGD(1)
#define MPU_CESR_NRGD_16_DESCS	MPU_CESR_NRGD(2)

#define MPU_CESR_NSP_MASK	GENMASK(15, 12)
#define MPU_CESR_NSP(x)		FIELD_PREP(MPU_CESR_NSP_MASK, x)

#define MPU_CESR_HRL_MASK	GENMASK(19, 16)
#define MPU_CESR_HRL(x)		FIELD_PREP(MPU_CESR_HRL_MASK, x)

#define MPU_CESR_SPERR_MASK	GENMASK(31, 27)
#define MPU_CESR_SPERR_BIT(n)	BIT(n + 27)

/* MPU_EDR */
#define MPU_EDR_ERW		BIT(0)

#define MPU_EDR_EATTR_MASK	GENMASK(3, 1)
#define MPU_EDR_EATTR(x)	FIELD_PREP(MPU_EDR_EATTR_MASK, x)
#define MPU_EDR_EATTR_UM_INSTR	MPU_EDR_EATTR(0)
#define MPU_EDR_EATTR_UM_DATA	MPU_EDR_EATTR(1)
#define MPU_EDR_EATTR_SM_INSTR	MPU_EDR_EATTR(2)
#define MPU_EDR_EATTR_SM_DATA	MPU_EDR_EATTR(3)

#define MPU_EDR_EMN_MASK	GENMASK(7, 4)
#define MPU_EDR_EMN(x)		FIELD_PREP(MPU_EDR_EMN_MASK, x)

#define MPU_EDR_EPID_MASK	GENMASK(15, 8)
#define MPU_EDR_EPID(x)		FIELD_PREP(MPU_EDR_EPID_MASK, x)

#define MPU_EDR_EACD_MASK	GENMASK(31, 16)
#define MPU_EDR_EACD(x)		FIELD_PREP(MPU_EDR_EACD_MASK, x)

/* MPU_RGDn_WORD0 */
#define MPU_RGDn_WORD0_SRTADDR	GENMASK(31, 5)

/* MPU_RGDn_WORD1 */
#define MPU_RGDn_WORD1_ENDADDR	GENMASK(31, 5)

/* MPU_RGDn_WORD2 */
#define MPU_RGDn_WORD2_MnUM_X(_m)	BIT(0 + 6 * (_m))
#define MPU_RGDn_WORD2_MnUM_W(_m)	BIT(1 + 6 * (_m))
#define MPU_RGDn_WORD2_MnUM_R(_m)	BIT(2 + 6 * (_m))
#define MPU_RGDn_WORD2_MnUM_RX(_m)	(MPU_RGDn_WORD2_MnUM_R(_m) | \
					 MPU_RGDn_WORD2_MnUM_X(_m))
#define MPU_RGDn_WORD2_MnUM_RW(_m)	(MPU_RGDn_WORD2_MnUM_R(_m) | \
					 MPU_RGDn_WORD2_MnUM_W(_m))
#define MPU_RGDn_WORD2_MnUM_RWX(_m)	(MPU_RGDn_WORD2_MnUM_R(_m) | \
					 MPU_RGDn_WORD2_MnUM_W(_m) | \
					 MPU_RGDn_WORD2_MnUM_X(_m))

#define MPU_RGDn_WORD2_MnSM_MASK(_m)	GENMASK(4 + 6 * (_m), 3 + 6 * (_m))
#define MPU_RGDn_WORD2_MnSM(_m, x)	FIELD_PREP(MPU_RGDn_WORD2_MnSM_MASK(_m), x)
#define MPU_RGDn_WORD2_MnSM_RWX(_m)	MPU_RGDn_WORD2_MnSM(_m, 0)
#define MPU_RGDn_WORD2_MnSM_RX(_m)	MPU_RGDn_WORD2_MnSM(_m, 1)
#define MPU_RGDn_WORD2_MnSM_RW(_m)	MPU_RGDn_WORD2_MnSM(_m, 2)
#define MPU_RGDn_WORD2_MnSM_AS_UM(_m)	MPU_RGDn_WORD2_MnSM(_m, 3)

#define MPU_RGDn_WORD2_MnPE(_m)		BIT(5 + 6 * (_m))

#define MPU_RGDn_WORD2_MnWE(_m)		BIT(24 + 2 * ((_m) - 4)
#define MPU_RGDn_WORD2_MnRE(_m)		BIT(25 + 2 * ((_m) - 4)

/* MPU_RGDn_WORD3 */
#define MPU_RGDn_WORD3_VLD		BIT(0)

#define MPU_RGDn_WORD3_PIDMASK_MASK	GENMASK(23, 16)
#define MPU_RGDn_WORD3_PIDMASK(x)	FIELD_PREP(MPU_RGDn_WORD3_PIDMASK_MASK, x)

#define MPU_RGDn_WORD3_PID_MASK		GENMASK(31, 24)
#define MPU_RGDn_WORD3_PID(x)		FIELD_PREP(MPU_RGDn_WORD3_PID_MASK, x)

/* MPU_RGDACCn has same contents as MPU_RGDn_WORD2 */

#endif /* MKL81_H */
